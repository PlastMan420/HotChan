@page "/post/{postid:Guid}"
@implements IDisposable
@inject HotChanWasmClient HotChanWasmClient;

<div class="container">
	<div class="row">
		<div class="image-frame">
			<img  src="@postMediaUri"/>
		</div>
	</div>


	<div class="row">
		<div class="post-meta">
			<h3>@postTitle</h3>
			<h6>@postDescription</h6>

		</div>

	</div>

	<div class="row">
		<div class="comments">
			<div class="card text-white bg-dark">
				<div class="card-body">
					<h5 class="card-title">Reply User</h5>
					<p class="card-text">Reply Block</p>
				</div>
			</div>

			<div class="input-group mb-3 ">
			<input type="text" class="form-control" placeholder="Drop a Comment" aria-label="comment" aria-describedby="button-addon2">
			<button class="btn btn-outline-secondary" type="button" id="button-addon2">Button</button>
		</div>
		</div>
	</div>

	

</div>

@code {
	[Parameter]
	public Guid postid { get; set; }
	private IDisposable storeSession;

	// post
	string postTitle;
	string postDescription;
	Uri postMediaUri;


	 protected override async Task OnInitializedAsync()
    {
        var result = await HotChanWasmClient.GetPostById.ExecuteAsync();
		postTitle = result.Data.PostById.PostTitle;
	}

	protected override void OnInitialized()
{
    storeSession =
        HotChanWasmClient
            .GetPostById
            .Watch(StrawberryShake.ExecutionStrategy.CacheFirst)
            .Where(t => !t.Errors.Any())
            .Select(t => t.Data.PostById.PostTitle)
            .Subscribe(result =>
            {
                postTitle = result;
                StateHasChanged();
            });
}
}